/* This configuration is as close to 2.5.x default behavior as possible
   The values closely match ./gmond/metric.h definitions in 2.5.x 
*/
globals {
  daemonize = yes                   # if 'true' gmond runs in background
  setuid = yes
  user = nobody
  debug_level = 0                   # above '0' you get verbose debug output 
  max_udp_msg_len = 1472            # DONT change this value
  mute = no                         # gmond will stop sending out traffic
  deaf = no                         # gmond will stop listening for traffic
  allow_extra_data = yes
  host_dmax = 86400 /*secs. Expires (removes from web interface) hosts in 1 day */
  host_tmax = 20 /*secs */          # Max time that gmond wait between update from a host
  cleanup_threshold = 300 /*secs */ # Min time before gmond cleans expired data
  gexec = no                        # DONT change this value
  send_metadata_interval = 0 /*secs */
}



/*
 * The cluster attributes specified will be used as part of the <CLUSTER>
 * tag that will wrap all hosts collected by this instance.
 */
cluster {
  name = "LibITS"                   # Specifies name of cluster
  owner = "systems"                 # Specifies administrator of cluster
  latlong = "unspecified"           # Specifies latitude/longitude GPS coordinates of this cluster on earth
  url = "unspecified"               # url with information specific to the cluster
}



/* The host section describes attributes of the host, like the location */
host {
  location = "Bobst Library"
}



/* Feel free to specify as many udp_send_channels as you like.  Gmond
   used to only support having a single channel 
*/
udp_send_channel {
  bind_hostname = yes  # Highly recommended, soon to be default.
                       # This option tells gmond to use a source address
                       # that resolves to the machine's hostname.  Without
                       # this, the metrics may appear to come from any
                       # interface and the DNS names associated with
                       # those IPs will be used to create the RRDs.
  mcast_join = 239.2.11.71  # Gmond creates UDP socket and join multicast group specified by IP
  port = 8649
  ttl = 1                   # Limits number of hops over which metric transmissions can propagate
}



/* You can specify as many udp_recv_channels as you like as well. */
udp_recv_channel {
  mcast_join = 239.2.11.71
  port = 8649
  bind = 239.2.11.71
  retry_bind = true
}



/* You can specify as many tcp_accept_channels as you like to share
   an xml description of the state of the cluster 
*/
tcp_accept_channel {         # Reports cluster state to gmetad or other external pollers
  port = 8649
}



/* Each metrics module that is referenced by gmond must be specified and
   loaded. If the module has been statically linked with gmond, it does
   not require a load path. However all dynamically loadable modules must
   include a load path. 
*/
modules {
  module {
    name = "core_metrics"
  }
  module {
    name = "cpu_module"
    path = "modcpu.so"
  }
  module {
    name = "disk_module"
    path = "moddisk.so"
  }
  module {
    name = "load_module"
    path = "modload.so"
  }
  module {
    name = "mem_module"
    path = "modmem.so"
  }
  module {
    name = "net_module"
    path = "modnet.so"
  }
  module {
    name = "proc_module"
    path = "modproc.so"
  }
  module {
    name = "sys_module"
    path = "modsys.so"
  }
}



/* This collection group will cause a heartbeat (or beacon) to be sent every
   20 seconds.  In the heartbeat is the GMOND_STARTED data which expresses
   the age of the running gmond. */
collection_group {
  collect_once = yes
  time_threshold = 20
  metric {
    name = "heartbeat"
  }
}



/* This collection group will send general info about this host every
   1200 secs.
   This information doesn't change between reboots and is only collected
   once. 
*/
collection_group {
  collect_once = yes
  time_threshold = 1200
  metric {
    name = "cpu_num"		# Number of CPUs
    title = "CPU Count"
  }
  metric {
    name = "cpu_speed"		# Speed in MHz of CPU
    title = "CPU Speed"
  }
  metric {
    name = "mem_total"
    title = "Memory Total"
  }
  /* Should this be here? Swap can be added/removed between reboots. */
  metric {
    name = "swap_total"
    title = "Swap Space Total"
  }
  metric {
    name = "boottime"
    title = "Last Boot Time"
  }
  metric {
    name = "machine_type"
    title = "Machine Type"
  }
  metric {
    name = "os_name"
    title = "Operating System"
  }
  metric {
    name = "os_release"
    title = "Operating System Release"
  }
  metric {
    name = "location"
    title = "Location"
  }
} 



/* This collection group will send the status of gexecd for this host
   every 300 secs.
   Unlike 2.5.x the default behavior is to report gexecd OFF. 
   When true, gmond will announce the hostâ€™s availability to run gexec jobs. This
   approach requires that gexecd be running on the host and the proper keys have
   been installed.
collection_group {
  collect_once = yes
  time_threshold = 300
  metric {
    name = "gexec"
    title = "Gexec Status"
  }
}
*/



/* This collection group will collect the CPU status info every 20 secs.
   The time threshold is set to 90 seconds.  In honesty, this
   time_threshold could be set significantly higher to reduce
   unneccessary  network chatter. 
*/
collection_group {
  collect_every = 20
  time_threshold = 90

  /* CPU status */
  metric {
    name = "cpu_user"           # Jobs run by Users in user space
    value_threshold = "1.0"
    title = "CPU User"
  }
  metric {
    name = "cpu_system"         # Jobs run by Kernel in kernel space
    value_threshold = "1.0"
    title = "CPU System"
  }
  metric {
    name = "cpu_idle"		# Percent CPU idle
    value_threshold = "5.0"
    title = "CPU Idle"
  }
} 



/* This collection will collect load average of system */
collection_group {
  collect_every = 20
  time_threshold = 90

  /* Load Averages */
  metric {
    name = "load_one"
    value_threshold = "1.0"
    title = "One Minute Load Average"
  }
  metric {
    name = "load_five"
    value_threshold = "1.0"
    title = "Five Minute Load Average"
  }
  metric {
    name = "load_fifteen"
    value_threshold = "1.0"
    title = "Fifteen Minute Load Average"
  }
}



/* This group collects the number of running and total processes */
collection_group {
  collect_every = 80
  time_threshold = 950
  metric {
    name = "proc_run"
    value_threshold = "1.0"
    title = "Total Running Processes"
  }
  metric {
    name = "proc_total"
    value_threshold = "1.0"
    title = "Total Processes"
  }
}



/* This collection group grabs the volatile memory metrics every 40 secs and
   sends them at least every 180 secs.  This time_threshold can be increased
   significantly to reduce unneeded network traffic. 
*/
collection_group {
  collect_every = 40
  time_threshold = 180
  metric {
    name = "mem_free"
    value_threshold = "1024.0"
    title = "Free Memory"
  }
  metric {
    name = "mem_shared"
    value_threshold = "1024.0"
    title = "Shared Memory"
  }
  metric {
    name = "mem_buffers"
    value_threshold = "1024.0"
    title = "Memory Buffers"
  }
  metric {
    name = "mem_cached"
    value_threshold = "1024.0"
    title = "Cached Memory"
  }
  metric {
    name = "swap_free"
    value_threshold = "1024.0"
    title = "Free Swap Space"
  }
} 



/* This collection group records network utilization on how many bytes/packets
   come in and come out.
*/
collection_group {
  collect_every = 40
  time_threshold = 300
  metric {
    name = "bytes_out"		# Number of bytes out per second
    value_threshold = 4096
    title = "Bytes Sent"
  }
  metric {
    name = "bytes_in"		# Number of bytes in per second
    value_threshold = 4096
    title = "Bytes Received"
  }
  metric {
    name = "pkts_in"
    value_threshold = 256
    title = "Packets Received"
  }
  metric {
    name = "pkts_out"
    value_threshold = 256
    title = "Packets Sent"
  }
}



/* This collection grabs Disk space utilization */
collection_group {
  collect_every = 1800
  time_threshold = 3600
  metric {
    name = "disk_total"
    value_threshold = 1.0
    title = "Total Disk Space"
  }
}
collection_group {
  collect_every = 40
  time_threshold = 180
  metric {
    name = "disk_free"
    value_threshold = 1.0
    title = "Disk Space Available"
  }
  metric {
    name = "part_max_used"
    value_threshold = 1.0
    title = "Maximum Disk Space Used"
  }
}



/* This is the location of module config files including python
   configuration files. Look for modpython.conf for python module
   configuration.
*/
include ("/etc/ganglia/conf.d/*.conf")

